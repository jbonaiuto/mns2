(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Redraws workmap after doing open-file-dialog" FUNCTION-DOCUMENTATION CLEAN-OPEN-FILE-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CLEAN-OPEN-FILE-DIALOG #K(#(80 2 3 0 1 2 4 23 3 5 1 4 38 4 6 38 5 7 23 6 6 2 6 7 21 0 1 2 6 38 4 7 38 7 8 23 6 0 2 7 8 21 0 3 4 5 23 8 0 1 5 23 9 0 3 4 2 5 11 0 5) #(0 29 41 46 58) #("; finished loading ~s~%" NIL T OPEN-FILE-DIALOG *WORKMAP* :GUI SEND :REDRAW LOAD FORMAT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-NOTHING #K(#(80 1 1 0 0 11 0 1) #(0) #(NIL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RADIANS #K(#(80 2 1 0 1 38 1 3 2 42 1 3 3 2 47 3 2 0 57 0) #(0) #(360 PI) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix window-object &key labels (decimals 2))
Prints MATRIX in WINDOW-OBJECT in a nice format with DECIMALS places after the decimal, and with optional row labels when the :LABELS keyword is followed by a list of labels. Prints to stdio if window-object is nil. Modified version of the print-matrix function written by Luke Tierney. Modified by FWY 08/24/91. Modified by FWY for XLSP+ 7/19/94. Modified again by FWY 8/30/96 for decimals." FUNCTION-DOCUMENTATION PRINT-MATRIX-TO-WINDOW %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRINT-MATRIX-TO-WINDOW #K(#(77 3 3 0 0 0 14 13 13 0 1 2 3 4 5 6 7 8 9 10 11 12 13 23 15 18 1 1 21 0 2 1 18 23 16 0 2 5 1 0 17 18 0 17 19 0 17 20 23 17 21 2 1 17 23 18 21 1 21 0 17 22 37 60 3 7 22 21 23 19 23 2 1 22 23 20 23 2 23 7 16 23 23 23 21 23 1 23 21 0 4 5 23 39 18 24 23 19 25 2 1 22 23 20 25 2 25 7 23 22 24 2 24 25 23 23 18 1 24 1 6 23 19 24 2 1 22 23 24 24 1 24 23 23 24 1 24 23 25 24 1 24 23 26 24 1 24 2 43 6 24 24 2 77 19 24 19 61 112 22 22 37 60 3 7 22 21 23 27 23 1 1 16 23 24 21 1 8 36 23 23 18 25 1 24 0 17 26 37 60 9 32 26 25 7 24 26 27 23 28 28 1 27 21 0 10 13 28 21 0 11 12 2 38 29 29 23 30 30 4 16 8 19 27 23 31 0 3 2 29 30 1 20 23 30 0 4 14 8 19 27 1 20 23 32 29 1 27 21 0 14 17 29 21 0 15 16 2 38 29 29 2 43 4 19 30 23 30 30 5 16 9 30 4 27 23 31 0 3 2 29 30 1 20 2 43 4 19 29 23 30 0 5 14 9 29 4 27 1 20 21 0 18 19 2 38 29 29 23 30 30 4 16 10 18 27 23 31 0 3 2 29 30 1 20 23 30 0 4 14 10 18 27 0 26 27 2 45 25 15 28 37 60 21 24 27 28 21 0 22 23 2 38 29 29 23 30 30 2 16 11 23 31 0 3 2 29 30 1 24 23 30 0 2 14 11 50 2 25 26 3 16 0 16 27 1 27 2 45 25 15 27 3 61 26 27 27 21 0 28 31 27 21 0 29 30 2 38 29 28 23 33 29 2 3 20 23 30 29 3 16 12 29 23 31 0 3 2 28 29 1 31 23 33 28 2 3 20 23 30 0 3 14 12 28 61 112 26 26 37 60 9 32 26 25 2 43 20 15 20 21 0 33 34 2 38 29 27 23 30 28 2 16 13 23 31 0 3 2 27 28 1 35 23 30 0 2 14 13 17 23 23 16 23 24 21 1 8 36 23 11 0 16) #(0 33 39 68 93 121 157 167 180 194 208 213 233 243 253 258 284 300 305 325 333 347 352 370 376 382 387 397 402 407 432 445 455 465 483 489 500) #("not a matrix - ~a" 4 LIST "~vd" "~v,vf" "~va" " " " ~a" "~%" T 1 NIL 0 (NIL 2) (:LABELS :DECIMALS) MATRIXP ERROR ROW LENGTH COL COERCE STRINGP MAPCAR MAX ABS ROUND FLATSIZE ROW-LIST INTEGERP :PASTE-STRING FORMAT SEND FLOATP SELECT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Function args :title
Macintosh: Opens a display window TITLE and returns display window object-id.
Dos/Unix:  Writes TITLE to listener and returns nil" FUNCTION-DOCUMENTATION REPORT-HEADER %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REPORT-HEADER #K(#(80 2 2 0 1 1 23 2 4 3 3 2 1 23 3 0 1 4 11 0 3) #(0) #("~2% ~a ****************~2%" NIL FORMAT DISPLAY-STRING) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Function args :title
Creates a new report window on the macintosh." :REPORT-WINDOW #K(#(80 3 4 0 1 2 3 8 38 4 7 38 5 8 38 6 9 38 7 10 38 8 11 38 9 12 23 10 13 2 6 5 38 11 14 2 43 13 14 13 23 12 7 8 7 8 9 2 10 11 12 13 38 13 8 23 12 8 2 1 8 21 0 1 2 8 38 13 9 23 14 10 2 8 7 23 12 0 3 1 9 10 1 3 38 13 9 23 10 10 1 7 23 12 0 3 1 9 10 51 4 8 1 7 23 15 0 4 7 4 8 3 11 0 7 80 3 0 4 38 16 3 38 13 4 38 16 5 38 13 6 23 12 5 2 5 6 23 17 5 2 1 5 23 12 0 3 3 4 5 38 18 3 25 12 0 2 1 3) #(0 66 84 99 115) #(NIL :REMOVE 20 0 DISPLAY-WINDOW-PROTO :NEW :TITLE :SIZE *TEXT-WINDOW-SIZE* :LOCATION LIST *TEXT-WINDOW-LOCATION* SEND :REPORT-WINDOW-ID-LIST COMBINE XLISP::ADD-METHOD *VISTA* REMOVE :CLOSE) 0 NIL) VISTA-SYSTEM-OBJECT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REPORT-WINDOW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Function args: (string)
Writes string to display-window w if w specified and if system is Macintosh, otherwise writes string to standard output. Forrest Young 10/17/91" FUNCTION-DOCUMENTATION DISPLAY-STRING %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DISPLAY-STRING #K(#(77 1 2 1 1 1 0 0 23 2 0 1 1 11 0 3) #(0) #(NIL #(NIL) PRINC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("A function which can be used to find the origin wrt to any (sub)set of variables in any graph. Produces a list of centers for the specified variables. Primarily useful for adding vectors to a plot." FUNCTION-DOCUMENTATION VECTOR-ORIGINS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VECTOR-ORIGINS #K(#(77 1 2 1 1 1 0 2 21 2 1 2 2 0 2 4 1 3 38 2 4 23 3 4 2 1 4 23 4 4 1 4 38 5 5 23 3 4 3 1 5 4 25 6 0 2 4 3) #(0 13 18 32) #(1 #(%NOT-SUPPLIED) :NUM-VARIABLES SEND ISEQ :CENTER SPLIT-LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: MATRIX &KEY (LIST NIL)
Row-list function which can optionally produce its output as a list of lists." FUNCTION-DOCUMENTATION ROW-LIST2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ROW-LIST2 #K(#(77 3 2 0 0 0 1 0 0 2 21 0 1 2 2 23 2 3 1 1 51 3 4 0 25 3 0 2 4 3 25 2 0 1 1 80 2 1 4 0 25 5 0 2 1 2) #(0 15 30 35) #((NIL) (:LIST) ROW-LIST MAPCAR LIST COERCE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: MATRIX &KEY (LIST NIL)
Column-list function which can optionally produce its output as a list of lists." FUNCTION-DOCUMENTATION COLUMN-LIST2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COLUMN-LIST2 #K(#(77 3 2 0 0 0 1 0 0 2 21 0 1 2 2 23 2 3 1 1 51 3 4 0 25 3 0 2 4 3 25 2 0 1 1 80 2 1 4 0 25 5 0 2 1 2) #(0 15 30 35) #((NIL) (:LIST) COLUMN-LIST MAPCAR LIST COERCE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ITEMS &REST ARGS
Bind-rows function which can optionally operate on lists-of-items, as well as separate lists of items." FUNCTION-DOCUMENTATION BIND-ROWS2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BIND-ROWS2 #K(#(77 2 2 0 0 2 39 0 3 23 1 3 2 3 1 21 0 1 2 3 39 2 4 23 3 3 2 4 1 1 3 23 2 3 1 1 21 0 4 7 2 39 0 4 23 1 4 2 4 2 21 0 5 6 4 39 4 4 23 3 4 2 4 2 25 2 0 2 3 4 25 2 0 2 3 2 11 0 3) #(0 20 31 36 41 55 70 76) #(COMPOUND-DATA-P SOME BIND-ROWS APPLY BIND-ROWS2) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ITEMS &REST ARGS
Bind-columns function which can optionally operate on lists-of-items, as well as separate lists of items." FUNCTION-DOCUMENTATION BIND-COLUMNS2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BIND-COLUMNS2 #K(#(77 2 2 0 0 2 39 0 3 23 1 3 2 3 1 21 0 1 2 3 39 2 4 23 3 3 2 4 1 1 3 23 2 3 1 1 21 0 4 7 2 39 0 4 23 1 4 2 4 2 21 0 5 6 4 39 4 4 23 3 4 2 4 2 25 2 0 2 3 4 25 2 0 2 3 2 11 0 3) #(0 20 31 36 41 55 70 76) #(COMPOUND-DATA-P SOME BIND-COLUMNS APPLY BIND-COLUMNS2) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix row-number)
 Takes a matrix and returns the row specified by row-number. If the keyword
 argument :LIST is set to t, the row is returned as a list." FUNCTION-DOCUMENTATION ROW %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ROW #K(#(77 3 3 0 0 0 1 0 0 1 38 2 4 23 3 4 3 1 4 3 25 4 0 2 4 2) #(0) #((NIL) (:LIST) :LIST ROW-LIST2 SELECT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix column-number)
 Takes a matrix and returns the column specified by column-number. If the
 keyword argument :LIST is set to t, the row is returned as a list." FUNCTION-DOCUMENTATION COL %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COL #K(#(77 3 3 0 0 0 1 0 0 1 38 2 4 23 3 4 3 1 4 3 25 4 0 2 4 2) #(0) #((NIL) (:LIST) :LIST COLUMN-LIST2 SELECT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (list-of-list)
 Takes a list of lists and returns a matrix with columns equal to the lists." FUNCTION-DOCUMENTATION LISTS-TO-MATRIX %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LISTS-TO-MATRIX #K(#(80 2 0 1 39 0 2 25 1 0 2 2 1) #(0) #(BIND-COLUMNS APPLY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (numeric-arg &optional num-decimal-places)
 Fuzzes the precision of any type of numeric argument to at most num-decimal-places decimal places.  Default num-decimal-places = 2." FUNCTION-DOCUMENTATION FUZZ %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FUZZ #K(#(77 1 2 1 1 1 0 2 23 2 4 2 3 2 2 42 4 1 5 23 3 5 1 5 2 47 5 4 0 57 0) #(0) #(10 #(2) ^ ROUND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix &optional (decimals 2))
Prints a matrix with precision specified by decimals (default is 2). Matrix may contain string values." FUNCTION-DOCUMENTATION PM %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PM #K(#(77 1 2 1 2 2 0 1 1 38 3 5 23 4 0 4 1 4 5 2 11 0 3) #(0) #(T NIL #(2) :DECIMALS PRINT-MATRIX-TO-WINDOW) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: MATRIX-LIST
Prints each matrix in a list of matrices using the pm function." FUNCTION-DOCUMENTATION PMS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PMS #K(#(80 2 1 0 1 39 1 3 23 2 0 2 3 1 11 0 2) #(0) #(T PM MAPCAR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: SYMBOL-NAME VAL
Redefines gensym to return a particular string with a particular value. If the two optional arguments are not specified, the function just performs a GENSYM." FUNCTION-DOCUMENTATION GENSYM2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENSYM2 #K(#(77 1 1 2 2 2 0 1 2 21 0 1 4 2 23 3 0 1 4 2 45 2 3 5 0 4 6 37 60 2 3 6 5 23 3 0 0 61 112 6 6 37 60 2 3 6 5 25 3 0 1 1 21 0 5 6 1 25 3 0 1 1 25 3 0 0) #(0 14 33 47 52 57 62) #(1 0 #(NIL NIL) GENSYM) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: X Y
 A vectorized character comparison function.  Works like =, only for character arguments" FUNCTION-DOCUMENTATION $= %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #($= #K(#(80 3 0 1 39 0 3 25 1 0 3 3 1 2) #(0) #(EQUALP MAP-ELEMENTS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: STRING-A STRING-B
Search for first occurance of STRING-A (which must be a single character string) in STRING-B.  If found, return position index.  If not found, return nil. (Note that XLisp has no search function)." FUNCTION-DOCUMENTATION SEARCH-STRING %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SEARCH-STRING #K(#(80 3 2 0 1 5 0 4 5 23 2 6 1 2 0 3 7 37 60 1 4 7 6 23 3 8 2 1 3 23 3 9 2 2 7 23 4 8 2 8 9 21 0 2 3 8 0 7 5 1 4 61 112 7 7 37 60 1 4 7 6 11 0 5) #(0 23 46 51 61) #(0 NIL LENGTH CHAR CHAR=) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: STRING-A STRING-B POSITION
Substitute STRING-A into STRING-B at POSITION. (Note that XLisp has no substitute function)." FUNCTION-DOCUMENTATION SUBSTITUTE-STRING %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SUBSTITUTE-STRING #K(#(80 4 3 0 1 2 2 23 3 7 3 2 6 3 2 43 3 5 8 23 3 8 2 2 8 25 4 0 4 4 7 1 8) #(0) #(STRING 1 0 SUBSEQ CONCATENATE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Arg: STRING
Convert all blanks in STRING to dashes, truncating terminating blank." FUNCTION-DOCUMENTATION BLANKS-TO-DASHES %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BLANKS-TO-DASHES #K(#(80 2 4 0 1 2 3 4 23 4 6 2 5 1 0 1 7 21 0 1 4 6 23 5 7 3 4 1 6 23 6 8 1 7 61 109 8 8 23 7 8 2 7 8 50 2 2 3 4 8 23 6 9 1 7 61 109 9 9 23 7 7 3 7 2 9 25 8 0 1 7 11 0 1) #(0 22 50 66 71) #(0 NIL "-" " " SEARCH-STRING SUBSTITUTE-STRING LENGTH SUBSEQ BLANKS-TO-DASHES) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: STRING
Removes period and following characters from a string. Returns string up to period, or entire string if none. [function.lsp]" FUNCTION-DOCUMENTATION REMOVE-PERIOD %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REMOVE-PERIOD #K(#(80 2 2 0 1 1 23 2 4 2 3 1 21 0 1 2 4 25 3 0 3 1 2 4 11 0 1) #(0 17 24) #(0 "." SEARCH-STRING SUBSEQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (string-a string-b)
String-a and string-b are lists of strings.  Returns a list whose length
equals the number of occurances of the elements of string-a in string-b.  
The list contains the position of each element of string-a in string-b 
(ignoring the case of the strings).  If an element of string-a is not in 
string-b, a nil element is returned." FUNCTION-DOCUMENTATION $POSITION %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #($POSITION #K(#(80 3 2 0 1 4 0 4 5 23 2 6 1 1 0 3 7 37 60 1 2 7 6 23 3 8 2 1 7 23 4 8 2 8 2 23 5 8 1 8 23 6 5 2 5 8 61 112 7 7 37 60 1 2 7 6 17 5 0 57 0) #(0 23 56) #(0 NIL LENGTH SELECT $= WHICH COMBINE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NOT2 #K(#(80 2 0 1 39 0 2 25 1 0 2 2 1) #(0) #(NOT MAP-ELEMENTS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNIQUE-VALUES #K(#(80 2 0 0 25 0 0 1 1) #(0) #(REMOVE-DUPLICATES) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: STRING
Converts a number represented as a string into a number." FUNCTION-DOCUMENTATION NUMBER-FROM-STRING %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NUMBER-FROM-STRING #K(#(80 2 1 0 1 23 1 3 1 1 23 2 3 2 3 2 25 3 0 1 3) #(0) #(NIL MAKE-STRING-INPUT-STREAM READ EVAL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(QUIT #K(#(80 1 1 0 2 38 1 2 21 0 1 4 2 23 2 2 0 38 3 3 23 4 2 2 2 3 21 0 2 3 2 25 5 0 0 11 0 1 23 6 0 0 25 5 0 0) #(0 13 31 35 38) #(NIL *CURRENT-OBJECT* EXIT PREPARE-TO-QUIT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PREPARE-TO-QUIT #K(#(80 1 2 0 1 5 23 2 0 0 38 3 3 38 4 4 23 5 3 2 3 4 21 0 1 2 3 38 3 4 38 4 5 23 5 4 2 4 5 38 6 5 23 5 0 2 4 5 38 3 4 38 4 5 23 5 0 3 4 5 2 38 3 3 38 7 4 23 5 3 2 3 4 23 8 4 1 3 21 0 3 6 3 0 1 5 37 60 4 5 5 4 23 9 6 2 3 5 38 10 7 23 5 0 2 6 7 61 112 5 5 37 60 4 5 5 4 11 0 2 11 0 2) #(0 27 61 83 92 117 120) #(0 NIL CLOSE-ALL-PLOTS *VISTA* :HELP-WINDOW-OBJECT SEND :CLOSE :REPORT-WINDOW-ID-LIST LENGTH SELECT :REMOVE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FILE-TO-STREAM #K(#(77 1 3 1 4 4 0 1 2 3 5 21 2 1 2 3 0 3 8 1 3 38 5 8 23 6 0 0 50 2 4 5 2 6 23 7 0 3 8 4 2 1 6 23 7 0 3 8 5 2 38 8 9 38 9 10 23 10 9 3 1 9 10 56 10 7 10 10 25 11 0 0 21 0 8 9 9 25 12 10 1 9 11 10 7 0 7 11 23 13 11 3 9 7 7 0 11 12 21 0 12 13 12 23 14 0 2 11 8 1 11 11 10 7) #(0 16 21 24 34 43 50 72 77 82 85 88 103 111) #("~3%**************** ~a  ****************~2%" "~3%****************  Help for ~a  ****************~2%" "Bug List" NIL #(%NOT-SUPPLIED) *STANDARD-OUTPUT* GC FORMAT :DIRECTION :INPUT OPEN TERPRI CLOSE READ-CHAR WRITE-CHAR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FILE-TO-WINDOW #K(#(80 4 7 0 1 2 3 4 5 6 6 0 3 11 23 7 12 1 1 56 4 1 13 13 57 0 21 0 2 3 12 25 8 13 1 12 11 13 10 0 11 14 21 0 6 5 14 38 9 15 38 10 16 23 11 11 2 15 16 38 12 15 38 13 16 23 11 0 3 15 16 11 38 12 15 38 14 16 23 11 0 3 15 16 9 38 15 15 23 11 0 4 11 15 6 5 49 16 11 0 51 12 15 0 23 17 0 4 11 4 15 10 38 18 14 23 11 0 2 11 14 50 2 7 8 2 8 38 19 14 23 11 0 3 11 14 2 1 9 38 19 14 23 20 15 2 7 2 23 11 0 3 11 14 15 38 21 14 23 11 0 3 11 14 12 38 22 14 23 11 0 2 11 14 38 12 14 38 14 15 23 11 14 2 14 15 21 0 10 11 14 11 13 10 38 22 14 23 11 0 2 11 14 38 12 14 38 14 15 25 11 13 3 14 15 9 80 2 1 6 2 38 23 3 23 11 0 2 1 3 38 12 3 38 14 4 23 11 0 3 3 4 2 38 24 3 38 25 4 23 11 3 2 3 4 21 0 13 14 3 38 12 3 38 26 4 23 11 0 3 3 4 2 38 24 3 38 25 4 25 11 0 3 3 4 2 11 0 2) #(0 26 31 36 39 47 112 127 139 155 191 194 216 260 286) #(:REMOVE 154 26 "Help for " "Bug List" T NIL OPEN CLOSE DISPLAY-WINDOW-PROTO :NEW SEND *VISTA* :HELP-WINDOW-OBJECT :HELP-WINDOW-STATUS :LOCATION *HELP-WINDOW* XLISP::ADD-METHOD :FLUSH-WINDOW :TITLE STRCAT :PASTE-STREAM :SHOW-WINDOW :HIDE-WINDOW COMMAND-MENU-SHOW-HELP-ITEM :MARK :SHOW-HELP) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: MATRIX-LIST MATRIX
Adds MATRIX as a new element at the end of MATRIX-LIST." FUNCTION-DOCUMENTATION MAKE-MATRIX-LIST %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-MATRIX-LIST #K(#(80 3 3 0 1 2 4 23 3 6 1 1 2 43 5 6 7 38 4 8 23 5 7 3 7 8 4 37 62 1 4 6 3 0 3 8 37 60 2 3 8 6 23 6 9 2 1 8 23 7 0 3 7 8 9 61 112 8 8 37 60 2 3 8 6 23 7 0 3 7 6 2 1 6 37 61 5 6 6 3 23 8 7 1 2 11 0 7) #(0 33 42 65 74 80 85) #(0 NIL 1 LENGTH :INITIAL-ELEMENT MAKE-LIST SELECT SET-SELECT LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: Extends 3.46 select function to work on strings. Not needed for 3.50." FUNCTION-DOCUMENTATION SELECT2 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SELECT2 #K(#(80 3 2 0 1 2 38 2 5 37 62 1 2 5 4 25 3 0 2 1 2 21 0 3 6 2 23 4 5 1 2 21 0 4 5 5 16 2 5 23 5 6 1 2 16 6 6 61 112 6 6 25 6 0 3 1 5 6 25 3 0 2 1 2 11 0 3) #(0 15 21 26 36 58 64) #(NIL 49 XLS-MINOR-RELEASE SELECT SEQUENCEP LAST SUBSEQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: LIST ELEMENT
Adds ELEMENT as a new element to the end of LIST, creating a one element list when LIST is nil (there must be a much better way to do this)." FUNCTION-DOCUMENTATION ADD-ELEMENT-TO-LIST %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-ELEMENT-TO-LIST #K(#(80 3 3 0 1 2 4 23 3 6 1 1 2 43 5 6 7 38 4 8 23 5 7 3 7 8 4 37 62 1 4 6 3 0 3 8 37 60 2 3 8 6 23 6 9 2 1 8 23 7 0 3 7 8 9 61 112 8 8 37 60 2 3 8 6 23 7 0 3 7 6 2 1 6 37 61 5 6 6 3 23 8 7 1 2 11 0 7) #(0 33 42 65 74 80 85) #(0 NIL 1 LENGTH :INITIAL-ELEMENT MAKE-LIST SELECT SET-SELECT LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Prints the least squares regression summary. Variables not used in the fit
are marked as aliased. Modified by Forrest Young from Luke Tierney's original version to include t-ratios and p-values and to display in window W when W not nil." :DISPLAY #K(#(77 1 2 1 28 28 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 21 38 29 31 23 30 31 2 1 31 23 31 31 2 31 30 38 32 32 23 30 32 2 1 32 0 29 33 0 29 34 38 33 35 23 30 35 2 1 35 38 34 36 23 30 36 2 1 36 38 35 37 23 30 37 2 1 37 2 45 37 28 37 38 29 38 23 30 38 2 1 38 23 36 38 1 38 2 45 38 28 38 2 45 37 38 39 38 37 40 23 30 40 2 1 40 38 38 41 23 30 41 2 1 41 2 45 40 41 42 38 39 43 23 30 43 2 1 43 2 45 43 28 44 38 35 45 23 30 45 2 1 45 2 45 45 28 45 2 47 45 36 45 2 42 44 45 44 2 43 28 44 44 38 40 45 23 30 45 2 1 45 38 41 46 23 30 46 2 1 46 21 0 1 2 46 23 42 47 2 29 3 23 43 0 2 47 2 1 3 23 42 47 2 29 4 23 43 0 2 47 2 23 42 46 2 29 27 23 43 0 2 46 2 23 42 46 2 29 26 23 43 0 2 46 2 38 44 46 23 30 46 2 1 46 21 0 4 8 46 16 31 47 16 32 48 2 47 47 48 33 23 45 47 1 33 23 46 47 2 47 36 2 45 28 47 47 2 42 10 47 34 0 34 47 37 60 5 6 47 8 0 6 34 1 7 23 47 34 2 34 7 16 31 47 16 32 48 23 42 47 6 29 5 47 48 33 34 23 43 0 2 47 2 17 31 31 17 32 32 23 48 46 2 35 28 0 25 47 37 60 9 16 47 46 38 49 48 23 30 48 2 1 48 23 50 48 2 47 48 21 0 10 14 48 16 31 49 16 32 50 2 47 49 50 33 23 45 49 1 33 23 46 49 2 49 36 2 45 28 49 49 2 42 10 49 34 0 34 49 37 60 11 12 49 8 0 6 34 1 13 23 47 34 2 34 7 23 51 49 2 45 47 16 31 50 16 32 51 23 42 49 7 29 9 49 50 51 33 34 23 43 0 2 49 2 17 31 31 17 32 32 1 15 23 51 49 2 45 47 23 42 49 3 29 11 49 23 43 0 2 49 2 61 112 47 47 37 60 9 16 47 46 23 42 48 2 29 24 23 43 0 2 48 2 23 42 48 3 29 23 43 23 43 0 2 48 2 23 42 48 3 29 22 44 23 43 0 2 48 2 38 52 48 23 30 48 2 1 48 23 42 48 3 29 21 48 23 43 0 2 48 2 38 35 48 23 30 48 2 1 48 23 42 48 3 29 20 48 23 43 0 2 48 2 38 35 48 23 30 48 2 1 48 38 53 49 23 30 49 2 1 49 37 35 17 18 48 49 38 53 50 23 30 50 2 1 50 23 42 50 3 29 12 50 23 43 0 2 50 2 23 42 48 3 29 19 36 23 43 0 2 48 2 23 42 48 2 29 18 23 43 0 2 48 2 23 42 48 2 29 17 23 43 0 2 48 2 38 54 48 23 30 0 8 1 48 2 16 42 38 41 39 38 54 48 23 30 0 6 1 48 2 15 41 39 38 54 48 23 30 0 6 1 48 2 14 40 37 23 42 48 2 29 13 25 43 0 2 48 2) #(0 210 224 236 274 315 320 326 354 369 389 430 435 441 478 497 507 613 635) #("~%PARAMETER ESTIMATES (WEIGHTED LEAST SQUARES):" "~%PARAMETER ESTIMATES (LEAST SQUARES)" "Constant               ~10,2f  ~10,2f ~10,2f   ~6f~%" "<.0001" 4 1.0E-4 "~22a ~10,2f  ~10,2f ~10,2f   ~6f~%" 2 "~22a    aliased~%" "Number of cases used:  ~10d~%" "~%" "Total" "Error" "Model" "~%Source             Sum-of-Squares   df  Mean-Square    F-Ratio   P-Value~%" "~%ANALYSIS OF VARIANCE: MODEL TEST" "Degrees of freedom:    ~10d~%" "Number of cases:       ~10d~%" "Sigma hat (RMS error): ~10,2f~%" "Adjusted R Squared:    ~10,2f~%" "R Squared:             ~10,2f~%" "~%SUMMARY OF FIT:~%" 0 "~%Term                     Estimate  Std. Error    t-Ratio  P-Value~%" " WITH TWO-TAILED T-TESTS." 1 NIL LIST #(NIL) :COEF-ESTIMATES SEND COERCE :COEF-STANDARD-ERRORS :X :DF :NUM-CASES LENGTH :TOTAL-SUM-OF-SQUARES :SUM-OF-SQUARES :R-SQUARED :PREDICTOR-NAMES :WEIGHTS FORMAT DISPLAY-STRING :INTERCEPT ABS T-CDF FUZZ ARRAY-DIMENSION :BASIS MEMBER SELECT :SIGMA-HAT :NUM-INCLUDED :ANOVA-TABLE-LINE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DISPLAY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ANOVA-TABLE-LINE #K(#(77 1 5 3 13 13 0 1 2 3 4 5 6 7 8 9 10 11 12 6 0 20 21 0 20 22 0 20 23 0 20 24 23 14 25 4 20 19 3 4 23 15 0 2 25 2 50 2 2 1 3 9 23 14 25 3 20 8 5 23 15 0 2 25 2 42 3 18 25 21 0 4 3 25 42 3 9 25 21 0 6 5 25 2 47 4 5 21 23 14 26 3 20 10 21 23 15 0 2 26 2 21 0 7 12 6 2 47 6 7 25 2 47 21 25 23 23 16 25 3 23 5 7 2 45 16 25 25 23 17 24 2 25 15 23 17 23 2 23 15 0 24 25 37 60 8 9 25 12 0 11 22 21 0 10 11 22 23 14 25 4 20 13 23 22 23 15 0 2 25 2 1 12 23 14 25 4 20 14 23 24 23 15 0 2 25 2 23 14 21 2 20 17 25 15 0 2 21 2) #(0 52 65 74 78 83 101 106 149 152 157 173 187) #("~4d" "Unique" "~13,2f" "   <.0001" 1.0E-4 "~11,2f ~9a" "~11,2f ~9f" 5 1 "~%" "Total" "~22a ~10,2f " NIL #(NIL NIL NIL) FORMAT DISPLAY-STRING F-CDF FUZZ) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ANOVA-TABLE-LINE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :FRAME-POLY #K(#(77 1 3 1 1 1 0 1 21 0 1 2 3 25 2 0 2 2 3 23 3 5 1 2 25 2 0 2 5 4) #(0 13 19) #(T #(T) CALL-NEXT-METHOD CUMSUM) 0 NIL) WORKMAP-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:FRAME-POLY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: SORT-BY-VARIABLE DATA-MATRIX &optional DESCENDING
Sorts elements of SORT-BY-VARIABLE into ascending (DESCENDING if t) order and permutes all values in each column of DATA-MATRIX into corresponding order. Returns list of permuted data." FUNCTION-DOCUMENTATION SORT-AND-PERMUTE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SORT-AND-PERMUTE #K(#(77 1 3 1 0 0 1 23 1 4 1 1 23 2 4 1 4 23 3 4 4 2 4 1 3 16 4 0 57 0) #(0) #(#(NIL) LENGTH ISEQ SORT-AND-PERMUTE-DOB) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: DATA-MATRIX LABELS SORT-BY-VARIABLE DESCENDING
Sorts elements of SORT-BY-VARIABLE into ascending (DESCENDING if t) order and permutes LABELS and all columns in DATA-MATRIX into corresponding order. Returns list of permuted data and labels." FUNCTION-DOCUMENTATION SORT-AND-PERMUTE-DOB %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SORT-AND-PERMUTE-DOB #K(#(80 5 1 0 7 23 1 6 1 1 23 2 7 1 3 0 5 8 0 5 9 0 5 10 21 0 1 2 4 23 3 7 1 7 23 4 8 2 6 7 23 4 9 2 2 7 23 5 11 1 1 23 6 12 1 8 23 7 10 2 11 12 25 8 0 2 10 9) #(0 29 34) #(NIL ROW-LIST ORDER REVERSE SELECT SIZE COMBINE MATRIX LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: sequence
Ranks elements in sequence, creating mean rank for tied elements. Ranks are 1-based so that lowest rank is 1 (not 0)" FUNCTION-DOCUMENTATION RANK-WITH-TIES %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RANK-WITH-TIES #K(#(80 2 4 0 1 2 3 12 23 4 6 1 1 23 5 6 1 6 23 6 6 2 1 6 23 7 7 1 6 0 5 8 0 5 9 0 4 10 23 8 11 2 4 7 0 3 12 0 3 13 37 60 1 10 13 7 0 13 14 2 45 7 5 15 37 61 2 4 14 15 2 47 9 8 10 0 8 16 0 3 17 37 60 3 9 17 16 23 9 0 3 11 12 10 61 112 12 12 61 112 17 17 37 60 3 9 17 16 23 6 16 2 6 13 61 112 13 17 23 6 17 2 6 17 37 61 5 6 16 17 61 112 8 8 23 10 9 3 9 13 2 1 9 2 47 9 8 10 0 8 16 0 3 17 37 60 7 8 17 16 23 9 0 3 11 12 10 61 112 12 12 61 112 17 17 37 60 7 8 17 16 0 5 8 2 43 2 13 9 61 112 13 13 37 60 1 10 13 7 23 4 14 1 1 25 6 0 2 11 14) #(0 56 70 87 108 130 143 160 181 189 199) #(2 0 NIL 1 RANK ORDER SELECT LENGTH REPEAT SET-SELECT +) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: TITLE STRING &optional YES
Presents Yes-No dialog with title TITLE and text TEXT. Default button is YES unless YES=NIL" FUNCTION-DOCUMENTATION YES-OR-NO-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(YES-OR-NO-DIALOG #K(#(77 1 3 1 3 3 0 1 2 9 38 4 7 38 5 8 23 6 7 3 7 8 1 38 4 8 38 5 9 23 6 8 3 8 9 2 38 7 9 38 5 10 38 8 11 51 5 12 0 23 6 9 5 9 10 6 11 12 38 7 10 38 5 11 38 8 12 51 4 13 0 23 6 10 5 10 11 5 12 13 0 4 11 21 0 1 2 3 38 9 12 38 5 13 23 10 14 2 9 10 23 10 14 3 7 8 14 38 11 15 23 6 11 5 12 13 14 15 9 1 3 38 9 12 38 5 13 23 10 14 2 10 9 23 10 14 3 7 8 14 38 11 15 23 6 11 5 12 13 14 15 10 38 12 12 25 6 0 2 11 12 80 1 1 0 0 11 0 1 80 1 1 13 0 11 0 1) #(0 88 121 152 161 169) #(NIL "No" "Yes" #(T) TEXT-ITEM-PROTO :NEW SEND MODAL-BUTTON-PROTO :ACTION MODAL-DIALOG-PROTO LIST :DEFAULT-BUTTON :MODAL-DIALOG T) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Function Args: string
Does string downcase if the X11 feature not present" FUNCTION-DOCUMENTATION STRING-DOWNCASE-IF-NOT-X11 %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(STRING-DOWNCASE-IF-NOT-X11 #K(#(80 2 0 0 11 0 1) #(0) #() 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Function Args: FILE
Compiles FILE in directory *code-dir-name*. FILE must have no extension." FUNCTION-DOCUMENTATION COMPILE-VISTA-FILE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPILE-VISTA-FILE #K(#(80 2 3 0 1 2 5 38 3 5 23 4 5 3 5 1 4 38 5 6 38 3 7 23 4 7 3 7 1 3 38 6 8 38 7 9 25 8 0 7 5 6 7 8 2 9 2) #(0) #(T ".fsl" ".lsp" *CODE-DIR-NAME* STRCAT :OUTPUT-FILE :PRINT :VERBOSE COMPILE-FILE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPILE-VISTA-FILES #K(#(80 2 0 1 39 0 2 25 1 0 2 2 1) #(0) #(COMPILE-VISTA-FILE MAPCAR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPILE-VISTA-BASE #K(#(80 1 1 0 1 39 1 2 25 2 0 2 2 1) #(0) #(("vista" "vismenu1" "vismenu2" "iconobj1" "iconobj2" "workmap1" "workmap2" "workmap3" "systmob1" "systmob2" "systmob3" "dataobj1" "dataobj2" "dataobj3" "dataobj4" "datasim" "graphic0" "graphic1" "spinplot" "boxplot1" "boxplot2" "qplotobj" "datavis" "dashobj1" "dashobj2" "dashobj3" "dashobj4" "modelobj" "tranobj1" "tranobj2" "function" "statfunc" "sprdplot" "generic" "displayw" "overlay" "graphelp") COMPILE-VISTA-BASE-FILE MAPCAR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Function Args: FILE
Compiles FILE in directory *base-dir-name*. FILE must be a string filename with no extension. Places compiled result in directory *base-dir-name* and in *code-dir-name*" FUNCTION-DOCUMENTATION COMPILE-VISTA-BASE-FILE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPILE-VISTA-BASE-FILE #K(#(80 2 6 0 1 2 3 4 5 5 38 6 8 23 7 8 3 8 1 7 38 8 9 38 6 10 23 7 10 3 10 1 6 38 9 11 38 10 12 23 11 0 7 8 9 10 11 5 12 5 38 6 8 23 7 8 3 8 1 6 23 12 8 1 8 56 4 1 9 9 57 0 21 0 2 3 8 25 13 9 1 8 11 9 4 38 14 10 23 7 10 3 10 1 6 38 15 11 38 16 12 23 12 10 3 10 11 12 56 8 5 11 11 57 9 21 0 6 7 10 25 13 11 1 10 11 11 4 23 17 12 3 8 4 4 49 18 12 0 38 18 12 21 0 10 11 12 38 18 12 23 19 0 3 10 2 12 1 9 38 14 12 23 7 12 3 12 1 6 25 19 11 3 5 3 12) #(0 72 77 82 85 115 120 125 128 128 147 159) #("~a~%" "; writing file ~a~%~%" NIL T ".fsl" ".lsp" *BASE-DIR-NAME* STRCAT :OUTPUT-FILE :PRINT :VERBOSE COMPILE-FILE OPEN CLOSE *CODE-DIR-NAME* :DIRECTION :OUTPUT READ-LINE LINE FORMAT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INITIALIZE-VISTA-WORKSPACE #K(#(80 1 5 0 1 2 3 4 1 23 5 6 0 23 6 6 3 6 5 4 49 7 6 0 38 7 6 23 6 6 3 6 3 4 49 8 6 0 38 7 6 23 6 6 3 6 2 4 49 9 6 0 23 10 0 1 1 23 11 0 0 25 12 0 0) #(0) #(T "Guidance" "Help" "/" "ViSta" GET-WORKING-DIRECTORY STRCAT *VISTA-DIR-NAME* *HELP-DIR-NAME* *GUIDE-DIR-NAME* MENUS SHOW-WORKMAP MOVE-LISTENER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MOVE-LISTENER #K(#(80 1 1 0 0 11 0 1) #(0) #(NIL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAVE-VISTA-WORKSPACE #K(#(80 1 2 0 1 1 38 2 3 23 3 3 2 3 2 49 2 3 0 38 4 3 23 5 3 2 3 1 25 6 0 1 3) #(0) #("ViSta.wks" INITIALIZE-VISTA-WORKSPACE *STARTUP-FUNCTIONS* COMBINE *STARTUP-DIR* STRCAT SAVE-WORKSPACE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Returns run time in minutes" FUNCTION-DOCUMENTATION RUN-TIME %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RUN-TIME #K(#(80 1 1 0 2 23 1 2 0 38 2 3 25 3 0 3 2 3 1) #(0) #(60 GET-INTERNAL-REAL-TIME INTERNAL-TIME-UNITS-PER-SECOND /) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FATAL-MESSAGE #K(#(80 2 2 0 1 0 23 2 0 3 1 3 2 25 3 0 1 1) #(0) #(T NIL ERROR-MESSAGE ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: text &key (title \"ViSta Message\") (beep t) size location
Displays TEXT in window of SIZE at LOCATION with TITLE. Beeps" FUNCTION-DOCUMENTATION VISTA-MESSAGE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VISTA-MESSAGE #K(#(77 3 2 0 0 0 2 1 1 0 3 21 0 1 2 3 23 3 0 0 21 0 3 4 4 39 4 8 38 5 9 38 6 10 23 7 0 4 8 9 10 4 21 0 5 6 5 39 4 8 38 5 9 38 8 10 23 7 0 4 8 9 10 5 1 7 39 4 8 38 5 9 38 8 10 23 7 0 4 8 9 10 6 21 0 8 9 6 39 4 8 38 5 9 38 9 10 23 7 0 4 8 9 10 6 38 5 8 38 10 9 25 4 0 4 8 9 1 2) #(0 16 20 25 42 47 66 83 88 105) #(NIL ("ViSta Message" T NIL NIL NIL) (:TITLE :BEEP :SIZE :LOCATION :FRAME-LOCATION) SYSBEEP SEND *MESSAGE-WINDOW* :SIZE APPLY :LOCATION :FRAME-LOCATION :SHOW-MESSAGE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: text &key (title \"About These Data\") (beep t) size location
Displays TEXT in window of SIZE at LOCATION with TITLE. Beeps" FUNCTION-DOCUMENTATION ABOUT-MESSAGE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ABOUT-MESSAGE #K(#(77 3 2 0 0 0 2 1 1 0 3 21 0 1 2 3 23 3 0 0 21 0 3 4 4 39 4 8 38 5 9 38 6 10 23 7 0 4 8 9 10 4 21 0 5 6 5 39 4 8 38 5 9 38 8 10 23 7 0 4 8 9 10 5 1 7 39 4 8 38 5 9 38 8 10 23 7 0 4 8 9 10 6 21 0 8 9 6 39 4 8 38 5 9 38 9 10 23 7 0 4 8 9 10 6 38 5 8 38 10 9 25 4 0 4 8 9 1 2) #(0 16 20 25 42 47 66 83 88 105) #(NIL ("About These Data" T NIL NIL NIL) (:TITLE :BEEP :SIZE :LOCATION :FRAME-LOCATION) SYSBEEP SEND *ABOUT-WINDOW* :SIZE APPLY :LOCATION :FRAME-LOCATION :SHOW-MESSAGE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("function" PROVIDE) 0 NIL)
